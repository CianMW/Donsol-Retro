Initialize game
    createDeck()
    shuffleDeck(deck)
    playerHealth = 21
    equippedShield = null
    previousShieldValue = null
    isPreviousRoomEscaped = false
    gameMode = chooseGameMode()  // Easy, Normal, Hard

function createDeck()
    deck = []
    for each suit in [Hearts, Diamonds, Clubs, Spades, Joker]
        for each value in [1 to 13] // 11 for Jack, 12 for Queen, 13 for King
            deck.push(createCard(suit, value))
    deck.push(createCard(Joker, 21))
    deck.push(createCard(Joker, 21))
    return deck

function shuffleDeck(deck)
    // Implement a shuffling algorithm (e.g., Fisher-Yates)

function drawRoom(deck)
    room = deck.slice(0, 4)
    deck = deck.slice(4)
    return room, deck

while playerHealth > 0 and deck is not empty
    room, deck = drawRoom(deck)
    displayRoom(room)
    
    for each card in room
        if card is a Heart
            handlePotion(card)
        else if card is a Diamond
            equippedShield = handleShield(card)
        else if card is a Club or Spade
            playerHealth = handleMonster(card, playerHealth, equippedShield)
            if equippedShield is broken
                equippedShield = null
        else if card is a Joker
            playerHealth = handleJoker(playerHealth)
        
        if playerHealth <= 0
            displayGameOver()
            break

    if player wants to escape
        if canEscape(isPreviousRoomEscaped, gameMode)
            deck.append(room)  // Put the remaining cards back in the deck
            isPreviousRoomEscaped = true
        else
            displayCannotEscapeMessage()

function handlePotion(card)
    if firstPotionInARow
        playerHealth = min(playerHealth + card.value, 21)
        firstPotionInARow = false
    // else, do nothing (player gets sick)

function handleShield(card)
    shieldValue = getCardValue(card)
    if previousShieldValue is not null and shieldValue >= previousShieldValue
        // Shield breaks, player is unarmored
        return null
    previousShieldValue = shieldValue
    return shieldValue

function handleMonster(card, playerHealth, equippedShield)
    monsterValue = getCardValue(card, isMonster=true)
    if equippedShield is not null
        damage = max(monsterValue - equippedShield, 0)
    else
        damage = monsterValue
    return playerHealth - damage

function handleJoker(playerHealth)
    // Jokers are the strongest monsters
    return playerHealth - 21

function canEscape(isPreviousRoomEscaped, gameMode)
    switch gameMode
        case Easy:
            return true
        case Normal:
            return not isPreviousRoomEscaped
        case Hard:
            return allMonstersInRoomDefeated() and not isPreviousRoomEscaped
